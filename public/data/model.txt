import json
import pandas as pd
import numpy as np

# Decision Tree Classifier
from sklearn import metrics
from sklearn.cross_validation import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import StandardScaler
from sklearn import random_projection
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import SGDClassifier, Perceptron
from sklearn.svm import SVC, LinearSVC
from sklearn.linear_model import RidgeClassifier
from sklearn import random_projection
from sklearn.cross_validation import KFold

def change_scale(current_val, current_min, current_max, final_min, final_max):
    return (((final_max-final_min)*(current_val-current_min))/(current_max-current_min))+final_min;

def byteify(input):
    if isinstance(input, dict):
        return {byteify(key):byteify(value) for key,value in input.iteritems()}
    elif isinstance(input, list):
        return [byteify(element) for element in input]
    elif isinstance(input, unicode):
        return input.encode('utf-8')
    else:
        return input


json1_file = open('results.json')
json1_str = json1_file.read()
json1_data = json.loads(json1_str)
json1_data = byteify(json1_data)

init_year = 1935
final_year = 2009

years = []
years_total = {}
year_min = []
year_max = []
words = {}
for i in range(init_year, final_year):
  letters = json1_data[str(i)]
  years.append(i)
  min_val = 99999999999
  max_val = 0
  for letter in letters:
    for word in letters[letter]:
      count = letters[letter][word]
      if word not in words:
        words[word] = []
      if word not in years_total:
        years_total[word] = count
      else:
        years_total[word] += count

      words[word].append(count)

      if count > max_val:
        max_val = count
      if count < min_val:
        min_val = count
  year_max.append(max_val)
  year_min.append(min_val)



#Change to normalize from 0 to 1
years_attack_occurred = [1982, 1983, 1984, 1985, 1992, 1993, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009]
data_array_x = []
results_array_y = []
counter = 0
for i in range(init_year, final_year):
  data_point = []
  if i in years_attack_occurred:
    results_array_y.append(1)
  else:
    results_array_y.append(0)

  for word in words:
    words[word][counter] = change_scale(float(words[word][counter]), float(year_min[counter]), float(year_max[counter]), 0.0, 1.0)
    data_point.append(words[word][counter])
  counter+= 1
  data_array_x.append(data_point)

X = np.array(data_array_x)
Y =  np.array(results_array_y)

names = ["SGDClassifier", "Linear SVC", "SVC Kernel RBF", "PerceptronL1", "PerceptronL2", "Nearest Neighbors", "Ridge Classifier"] #
classifiers = [
        SGDClassifier(loss="hinge", penalty="l2"),
        # LinearSVC(),
        SVC(kernel="rbf"),
        Perceptron(penalty='l1'),
        Perceptron(penalty='l2', n_iter=25),
        KNeighborsClassifier(),
        RidgeClassifier(),
        ]

accuracy_clf = []
clf_name = []
kf = KFold(len(X), n_folds=len(X))
for name, clf in zip(names, classifiers):
  acc = 0
  counter = 0
  for train, test in kf:
    X_train, X_test, y_train, y_test = X[train], X[test], Y[train], Y[test]
    clf.fit(X_train, y_train)
    predicted = clf.predict(X_test)
    acc += (100 * clf.score(X_test, y_test))
    counter += 1
  clf_name.append(name)
  accuracy_clf.append(acc/counter)

print clf_name
print accuracy_clf







