//var filename = "initial_bkfrat.json";
//var filename = "initial_bktec.json";
var filename = "final_bkfrat.json";
//var filename = "final_bktec.json";
var community = true;


var width = window.screen.width,
    height = window.screen.height;

var color = d3.scale.category20();

var force = d3.layout.force()
    .charge(-120)
    .linkDistance(350)
    .size([width, height]);

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

d3.json(filename, function(error, graph) {
  force
      .nodes(graph.nodes)
      .links(graph.links)
      .start();

  var link = svg.selectAll(".link")
      .data(graph.links)
    .enter().append("line")
      .attr("class", "link");
      //.style("stroke-width", function(d) { return Math.sqrt(d.value); });

  var node = svg.selectAll(".node")
      .data(graph.nodes)
    .enter().append("circle")
      .attr("class", "node")
      .attr("r", 5)
      .style("fill", function(d) { if(!community) return "#595E66"; else return color(d.group); })//color(d.group); })
      .call(force.drag);

  node.append("title")
      .text(function(d) { return d.name; });

  node.on("mouseover", function (d) {
    d3.selectAll(".node").select('circle')
      .transition()
      .duration(500).call(ShowConnections(d));
  });


  function ShowConnections(z)
  {

    return function(d) {

          var e = [];
          d.each(function(a, i) { e[i] = a; });


          link.style("stroke-opacity", function(o) {
                  return 1;//e.indexOf(o.source) != -1 || e.indexOf(o.target) != -1 ? 1 : opacity;
              })
              .style("stroke", function(o) {
                //alert(o.source.name + " " + o.target+" "+e.name+" jj");
                //alert(z.name);
                  return (o.source.name == z.name || o.target.name == z.name) ? "red" : "#D3D3D3" ;
                  //e.indexOf(o.source.name) == e.indexOf(o.target) ? "red" : "blue" ;
              });
    }
  }
  force.on("tick", function() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node.attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  });
});
